// <auto-generated />
using CorlateBlog.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CorlateBlog.Infrastructure.Data.Migrations
{
    [DbContext(typeof(CorlateBlogDbContext))]
    [Migration("20251026043024_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CorlateBlog.Domain.Entities.Blog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("CommentCount")
                        .HasColumnType("integer");

                    b.Property<int>("CommentsReplies")
                        .HasColumnType("integer");

                    b.Property<int>("PostLikesCount")
                        .HasColumnType("integer");

                    b.Property<string>("PostPhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("CorlateBlog.Domain.Entities.PostCategoryTbl", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BlogId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostCategory")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("PostCategoryTbls");
                });

            modelBuilder.Entity("CorlateBlog.Domain.Entities.PostComment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BlogId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("CorlateBlog.Domain.Entities.ReplyTbl", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BlogId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostCommentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Reply")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("PostCommentId");

                    b.ToTable("ReplyTbls");
                });

            modelBuilder.Entity("CorlateBlog.Domain.Entities.TagTbl", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BlogId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CorlateBlog.Domain.Entities.PostCategoryTbl", b =>
                {
                    b.HasOne("CorlateBlog.Domain.Entities.Blog", "Blog")
                        .WithMany("PostCategories")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("CorlateBlog.Domain.Entities.PostComment", b =>
                {
                    b.HasOne("CorlateBlog.Domain.Entities.Blog", "Blog")
                        .WithMany("PostComments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("CorlateBlog.Domain.Entities.ReplyTbl", b =>
                {
                    b.HasOne("CorlateBlog.Domain.Entities.Blog", "Blog")
                        .WithMany()
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CorlateBlog.Domain.Entities.PostComment", "PostComment")
                        .WithMany("Replies")
                        .HasForeignKey("PostCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("PostComment");
                });

            modelBuilder.Entity("CorlateBlog.Domain.Entities.TagTbl", b =>
                {
                    b.HasOne("CorlateBlog.Domain.Entities.Blog", "Blog")
                        .WithMany("PostTags")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("CorlateBlog.Domain.Entities.Blog", b =>
                {
                    b.Navigation("PostCategories");

                    b.Navigation("PostComments");

                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("CorlateBlog.Domain.Entities.PostComment", b =>
                {
                    b.Navigation("Replies");
                });
#pragma warning restore 612, 618
        }
    }
}
